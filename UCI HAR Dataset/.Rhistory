geom_histogram(binwidth = 0.5)
ggplot(smaller, aes(x = carat, color = cut))+
geom_freqpoly(binwidth = 0.1)
### Typical values
# Which values are the most common? Why?
# Which values are rare? Why? Does that match your expectations?
# Can you see any unusual patterns? What might explain them?
# eg:
# Why are there more diamonds at whole carats and common fractions of carats?
# Why are there more diamonds slightly to the right of each peak than there are slightly to the left of each peak?
# Why are there no diamonds bigger than 3 carats?
ggplot(smaller, aes(x = carat))+
geom_histogram(binwidth = 0.01)
# How are the observations within each cluster similar to/different from each other?
# How can you explain or describe the clusters?
# Why might the appearance of clusters be misleading?
# 272 eruptions of the Old Faithful Geyser
ggplot(data = faithful, mapping = aes(x = eruptions)) +
geom_histogram(binwidth = 0.25)
### Unusual variables
ggplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.5)
# to see the small value, zoom to small values of the y-axis with coord_cartesian()
ggplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.5)+
coord_cartesian(ylim = c(0 : 50))
gplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.5)+
coord_cartesian(ylim = c(0, 50))
ggplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.5)+
coord_cartesian(ylim = c(0, 50))
unusual <- diamonds %>% filter(y = 0, between(y, 30, 40), between(y, 50, 60))
unusual <- diamonds %>% filter(y == 0, between(y, 30, 40), between(y, 50, 60))
unusual
unusual <- diamonds %>% filter(y == 0 | between(y, 30, 40) | between(y, 50, 60))
unusual
unusual <- diamonds %>% filter(y == 0 | y > 20) %>% select(price, x, y, z) %>% arrange(y)
unusual
ggplot(diamonds, aes(x = x))+
geom_histogram(binwidth = 0.05)
ggplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.05)
ggplot(diamonds, aes(x = z))+
geom_histogram(binwidth = 0.05)
ggplot(diamonds, aes(x = x))+
geom_histogram(binwidth = 0.05)
ggplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.05)+
coord_cartesian(xlim = c(0, 20))
ggplot(diamonds, aes(x = z))+
geom_histogram(binwidth = 0.05)+
coord_cartesian(xlim = c(0, 10))
ggplot(diamonds, aes(x = x))+
geom_histogram(binwidth = 0.05)
ggplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.05)+
coord_cartesian(xlim = c(0, 10))
ggplot(diamonds, aes(x = z))+
geom_histogram(binwidth = 0.05)+
coord_cartesian(xlim = c(0, 10))
ggplot(diamonds, aes(x = x))+
geom_histogram(binwidth = 0.05)
ggplot(diamonds, aes(x = y))+
geom_histogram(binwidth = 0.05)+
coord_cartesian(xlim = c(0, 10))
ggplot(diamonds, aes(x = z))+
geom_histogram(binwidth = 0.05)+
coord_cartesian(xlim = c(0, 6))
ggplot(diamonds, aes(x = price))+
geom_histogram(binwidth = 50)
ggplot(diamonds, aes(x = price))+
geom_histogram(binwidth = 1000)
ggplot(diamonds, aes(x = price))+
geom_histogram(binwidth = 500)+
coord_cartesian(xlim = c(0, 1000))
ggplot(diamonds, aes(x = price))+
geom_histogram(binwidth = 500)+
coord_cartesian(xlim = c(0, 2500))
ggplot(diamonds, aes(x = price))+
geom_histogram(binwidth = 500)+
coord_cartesian(xlim = c(0, 5000))
ggplot(diamonds, aes(x = price))+
geom_histogram(binwidth = 100)+
coord_cartesian(xlim = c(0, 5000))
diamonds %>% fliter(between(price, 1000, 2000))
diamonds %>% filter(between(price, 1000, 2000)) %>% select(price, carat, x, y, z) %>% arrange(price)
diamonds %>% filter(price == 1000) %>% select(price, carat, x, y, z) %>% arrange(price)
diamonds %>% filter(price == 1500) %>% select(price, carat, x, y, z) %>% arrange(price)
diamonds %>% filter(between(price, 1450, 1550)) %>% select(price, carat, x, y, z) %>% arrange(price)
gap <- diamonds %>% filter(between(price, 1450, 1550)) %>% select(price, carat, x, y, z) %>% arrange(price)
View(gap)
View(gap)
count(diamonds, carat == 0.99)
count(diamonds. carat == 1)
count(diamonds, carat == 1)
diamonds2 <- diamonds %>% mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(diamonds2, aes(x = x, y = y))+
geom_point()
diamonds2 <- diamonds %>% mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(diamonds2, aes(x = x, y = y))+
geom_point(na.rm = TRUE)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
library(tidyverse)
na <- tribble(
~a   ~b,
1    NA,
2    2,
3    2
)
na <- tribble(
~a,   ~b,
1,    NA,
2,    2,
3,    2
)
sum(na, is.na(b))
sum(na, is.na("b"))
na
na %>% sum(is.na(b))
summarise(na, sum(is.na(b)))
summarise(na, mean(is.na(b)))
ggplot(diamonds, aes(x = price, color = cut))+
geom_freqpoly(binwidth = 500)
ggplot(diamonds, aes(x = price, color = cut))+
geom_freqpoly(binwidth = 500, position = "density")
ggplot(diamonds, aes(x = price, y = ..density.., color = cut))+
geom_freqpoly(binwidth = 500)
ggplot(data = diamonds)+
geom_bar(aes(cut, fill = clarity), position = "identity", alpha = 1/5)
?geom_freqpoly
ggplot(diamonds, aes(x = price, y = stat(density), color = cut))+
geom_freqpoly(binwidth = 500)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))+
coord_flip()
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>% count(cut, color)
diamonds %>% count(cut, color)+
ggplot(aes(x = color, y = cut))+
geom_tile(aes(fill = n))
diamonds %>% count(cut, color) %>%
ggplot(aes(x = color, y = cut))+
geom_tile(aes(fill = n))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/100)
smaller <- filter(diamonds, carat < 3)
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
# install.packages("hexbin")
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = cut_width(carat, 0.1), y = price))+
geom_boxplot()
ggplot(data = smaller, mapping = aes(x = carat, y = price))+
geom_boxplot(mapping = aes(x = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price))+
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(mpg, aes(displ, hwy, group = drv))+
geom_smooth()
ggplot(data = smaller, mapping = aes(x = carat, y = price))+
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
ggplot(data = smaller, mapping = aes(x = carat, y = price))+
geom_boxplot(mapping = aes(group = cut_number(carat, 20)))
library(tidyverse)
ggplot(data = faithful, aes(x = eruptions, y = waiting))+
geom_point()
ggplot(data = faithful, mapping = aes(x = eruptions)) +
geom_histogram(binwidth = 0.25)
ggplot(diamonds, aes(x = price, y = stat(density), color = cut))+
geom_freqpoly(binwidth = 500)
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>% count(cut, color) %>%
ggplot(aes(x = color, y = cut))+
geom_tile(aes(fill = n))
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/100)
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
mod
diamonds2 <- diamonds %>% add_residuals(mod)
View(diamonds2)
View(diamonds2)
diamonds2 <- diamonds %>% add_residuals(mod) %>% mutate(resid = exp(resid))
View(diamonds2)
View(diamonds2)
ggplot(diamonds2, aes(x = carat, y = resid))+
geom_point(alpha = 1/100)
ggplot(data = diamonds2, aes(x = cut, y = resid))+
geom_boxplot()
getwd()
write_csv(diamonds, "diamonds.csv")
library(tidyverse)
ggplot(diamonds, aes(carat, price)) +
geom_hex()
ggsave("diamonds.pdf")
write_csv(diamonds, "diamonds.csv")
library(tidyverse)
df <- tibble(
a <- rep(1:3, 3)
b <- c(3, 2, 5, 1, 4, 8, 6, 9, 7)
)
df <- tibble(
a <- rep(1:3, 3),
b <- c(3, 2, 5, 1, 4, 8, 6, 9, 7)
)
df
df <- tibble(
a = rep(1:3, 3),
b = c(3, 2, 5, 1, 4, 8, 6, 9, 7)
)
df
df %>% group_by(a) %>%
mutate(rank = rank(b))
getwd()
featureinfo <- read.table('features.txt')
setwd("~/")
setwd("C:/Users/xytan/Downloads/Github/UCI HAR Dataset")
featureinfo <- read.table('features.txt')
features <- read.table('features.txt')
head(features)
features
activitylabels <- read.table("activity_labels")
activitylabels <- read.table("activity_labels.txt")
activitylabels
trainingset <- read.table("./test/X_test.txt")
head(trainingset)
trainlabel <- read.table("./test/Y_test.txt")
head(trainlabel)
summary(trainlabel)
table
table(trainlabel)
training <- cbind(trainlabel, trainingset)
subjecttest <- read.table("./test/subject_test.txt")
table(subjecttest)
str(subjecttest)
testset <- read.table("./test/X_test.txt")
## import training labels, 1-6 label groups, 2947 obs in total
testlabel <- read.table("./test/Y_test.txt")
## import 'subject_test':
# Each row identifies the subject who performed the activity for each window sample.
testsubject <- read.table("./test/subject_test.txt")
test <- cbind(subject = testsubject, label = testlabel, set = testset)
head(test, 1)
test <- cbind(testsubject, testlabel, testset)
head(test, 1)
testsignal <- list.files("./test")
testsignal
list.files("./test/Inertial Signals")
testsignal <- paste0("./test/Inertial Signals/", list.files("./test/Inertial Signals"))
testsignal
bodyaccx <- read.table(testsignal[1])
str(bodyaccx)
128*9
head(features, 2)
names(test) <- c(subject, label, features$V2)
names(test) <- c("subject", "label", features$V2)
names(test)
features$V2
features <- read.table('features.txt', stringsAsFactors = FALSE)
names(test) <- c("subject", "label", features$V2)
names(test)
list.files("./train")
paste0("./train/", list.files("./train"))
paste0("./train/", list.files("./train")[2:4])
traindir <- paste0("./train/", list.files("./train")[2:4])
trainset <- read.table(traindir[1])
trainset <- read.table(traindir[2])
## import training labels, 1-6 label groups, 2947 obs in total
trainlabel <- read.table(traindir[3])
## import 'subject_test':
# Each row identifies the subject who performed the activity for each window sample.
# 9 in test group
trainsubject <- read.table(traindir[1])
train <- cbind(trainsubject, trainlabel, trainset)
train <- cbind(rep("train", nrow(train)), train)
names(test) <- c("set", "subject", "label", features$V2)
names(train) <- c("set", "subject", "label", features$V2)
head(train, 1)
paste0("./test/", list.files("./test")[2:4])
testdir <- paste0("./test/", list.files("./test")[2:4])
testset <- read.table(testdir[2])
## import test labels, 1-6 label groups, 2947 obs in total
testlabel <- read.table(testdir[3])
## import 'subject_test':
# Each row identifies the subject who performed the activity for each window sample.
# 9 in test group
testsubject <- read.table(testdir[1])
## Merge training label and training set by col, cbind
## 1 subject_id + 1 label + 561 features, 2947 obs
test <- cbind(testsubject, testlabel, testset)
test <- cbind(rep("test", nrow(test)), test)
head(test, 1)
names(test) <- c("set", "subject", "label", features$V2)
bothset <- rbind(train, test)
2947+7352
17 +17 + 5
names(bothset)
mean(bodyaccx[1,])
head(bodyaccx, 1)
bodyaccx <- read.table(testsignal[1], stringsAsFactors = FALSE)
mean(bodyaccx[1,])
class(bodyaccx[1,])
mean(as.numeric(bodyaccx[1,]))
View(bothset)
test[1,]
bodyaccy <- read.table(testsignal[2], stringsAsFactors = FALSE)
tstbodyaccx <- read.table(testsignal[1], stringsAsFactors = FALSE)
tstbodyaccy <- read.table(testsignal[2], stringsAsFactors = FALSE)
trnbodyaccx <- read.table(trainsignal[1], stringsAsFactors = FALSE)
trnbodyaccy <- read.table(trainsignal[2], stringsAsFactors = FALSE)
trainsignal <- paste0("./train/Inertial Signals/", list.files("./train/Inertial Signals"))
trnbodyaccx <- read.table(trainsignal[1], stringsAsFactors = FALSE)
trnbodyaccy <- read.table(trainsignal[2], stringsAsFactors = FALSE)
vars <- names(bothset)
grep("mean | std", vars, value = TRUE)
grep("mean" | "std", vars, value = TRUE)
grep("mean|std", vars, value = TRUE)
measurement <- grep("mean|std", vars, value = TRUE)
grep("mean|std", vars)
measurement <- grep("mean|std", vars)
bothset[, measurement][1,]
extract <- function(data = bothset) {
vars <- names(bothset)
measurement <- grep("mean|std", vars)
bothset[, measurement]
}
activitylabels
?merge
names(activitylabels) <- c("label", "activity")
bothset <- merge(bothset, activitylabels, all = TRUE)
bothset[1,]
bothset[, -1]
names(bothset)
sub("()", "", names(bothset))
sub("\\(\\)", "", names(bothset))
bothset <- bothset[, -1]
split(bothset, c("activity", "subject"))
summarise <- split(bothset, c("activity", "subject"))
str(summarise)
summarise <- split(bothset, c(bothset$activity, bothset$subject))
str(summarise)
?split
bothset$activity&bothset$subject
intersect("bothset$activity", "bothset$subject")
interaction(bothset$activity, bothset$subject)
summarise <- split(bothset, list(bothset$activity, bothset$subject))
str(summarise)
splitlist <- split(bothset, list(bothset$activity, bothset$subject))
sapply(splitlist, colMeans)
summarise <- sapply(splitlist, function(x){colMeans(x[,-1])})
colmeans <- function(x) {
y <- x[, -1]
colMeans(y)
}
summarise <- sapply(splitlist, colmeans)
splitlist <- split(bothset[, -1], list(bothset$activity, bothset$subject))
summarise <- sapply(splitlist, colMeans)
head(str(splitlist), 3)
splitlist <- split(bothset[, -c(1, 2)], list(bothset$activity, bothset$subject))
summarise <- sapply(splitlist, colMeans)
head(splitlist, 1)
features <- read.table('features.txt', stringsAsFactors = FALSE)
## build a directory for 'train'
traindir <- paste0("./train/", list.files("./train")[2:4])
## [1-3]"subject_train.txt"  "X_train.txt"  "y_train.txt"
## import training set, 561 features are denoted as 561 vars, 7352 obs intotal
trainset <- read.table(traindir[2], stringsAsFactors = FALSE)
## import training labels, 1-6 label groups (6 activities), 7352 obs in total
trainlabel <- read.table(traindir[3], stringsAsFactors = FALSE)
## import 'subject_test':
# Each row identifies the subject who performed the activity for each window sample.
# 21 in train group
trainsubject <- read.table(traindir[1], stringsAsFactors = FALSE)
## Merge training label and training set by col, cbind
## 1 subject_id + 1 label + 561 features, 7352 obs
train <- cbind(trainsubject, trainlabel, trainset)
## add a column indication the train/test set
train <- cbind(rep("train", nrow(train)), train)
## add column names using features('features.txt')
names(train) <- c("set", "subject", "label", features$V2)
## build a directory for 'train'
testdir <- paste0("./test/", list.files("./test")[2:4])
## [1-3]"./test/subject_test.txt" "./test/X_test.txt"  "./test/y_test.txt"
## import test set, 561 features are denoted as 561 vars, 2947 obs intotal
testset <- read.table(testdir[2], stringsAsFactors = FALSE)
## import test labels, 1-6 label groups(6 activities), 2947 obs in total
testlabel <- read.table(testdir[3], stringsAsFactors = FALSE)
## import 'subject_test':
# Each row identifies the subject who performed the activity for each window sample.
# 9 in test group
testsubject <- read.table(testdir[1], stringsAsFactors = FALSE)
## Merge training label and training set by col, cbind
## 1 subject_id + 1 label + 561 features, 2947 obs
test <- cbind(testsubject, testlabel, testset)
## add a column indication the train/test set
test <- cbind(rep("test", nrow(test)), test)
## add column names using features('features.txt')
names(test) <- c("set", "subject", "label", features$V2)
## Merge train and test set
bothset <- rbind(train, test)
## add column names using features('features.txt')
names(test) <- c("subject", "label", features$V2)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
## extract() is used to extract measurements
extract <- function(data = bothset) {
vars <- names(bothset)
measurement <- grep("mean|std", vars)
bothset[, measurement]
}
# 3. Uses descriptive activity names to name the activities in the data set
## import 'activity_labels.txt': list all activity names(6).
activitylabels <- read.table("activity_labels.txt")
names(activitylabels) <- c("label", "activity")
bothset <- merge(bothset, activitylabels, by = "label", all = TRUE)
bothset <- bothset[, -1]
# 4. Appropriately labels the data set with descriptive variable names.
## remove "()' in the variable names
names(bothset) <- sub("\\(\\)", "", names(bothset))
splitlist <- split(bothset[, -c(1, 2)], list(bothset$activity, bothset$subject))
splitlist[[1]]
splitlist <- split(bothset, list(bothset$activity, bothset$subject))
splitlist[[1]]
names(bothset)
names(splitlist[[1]])
summarise <- sapply(splitlist, function(x){colMeans(x[, -c(1, 2, nrow(x))])})
data.frame(a=1:5, b= 6:10)
data.frame(a=1:5, b= 6:10)[, -"b"]
data.frame(a=1:5, b= 6:10)[, "-2"]
data.frame(a=1:5, b= 6:10)[,-2]
data.frame(a=1:5, b= 6:10, c=2:6)[,-c(1, 2)]
summarise <- sapply(splitlist, function(x){colMeans(x[, -c(1, 2, 564)])})
summarise[[1]]
summarise[1]
summarise <- lapply(splitlist, function(x){colMeans(x[, -c(1, 2, 564)])})
summarise
summarise[[1]]
class(summarise[[1]])
str(summarise[[1]])
summariselist <- lapply(splitlist, function(x){colMeans(x[, -c(1, 2, 564)])})
summarise <- sapply(splitlist, function(x){colMeans(x[, -c(1, 2, 564)])})
head(summarise)
summarise <- matrix(nrow = length(summariselist), ncol = nrow(summariselist[[1]]))
summarise <- matrix(0, nrow = length(summariselist), ncol = nrow(summariselist[[1]]))
summarise <- matrix(NA, nrow = length(summariselist), ncol = nrow(summariselist[[1]]))
summariselist <- lapply(splitlist, function(x){colMeans(x[, -c(1, 2, 564)])})
summarise <- matrix(nrow = length(summariselist), ncol = nrow(summariselist[[1]]))
matrix(nrow = 5, ncol = 5)
length(summariselist)
nrow(summariselist[[1]])
x <- summariselist[[1]]
nrol(x)
nrow()
nrow(x)
class(x)
summarise <- matrix(nrow = length(summariselist), ncol = length(summariselist[[1]]))
for (i in seq(nrow(summarise))) {
summarise[i,] <- summariselist[[i]]
}
head(summarise)
library(dplyr)
summaise <- bothset %>%
group_by(activity, subject) %>%
summarise(mean(bothset[, 3:563]))
warnings()
bothset[, 3:563]
summaise <- bothset %>%
group_by(activity, subject) %>%
summarise(mean(names(bothset)[3:563]))
warnings()
?summarise_each
summaise <- bothset %>%
group_by(activity, subject) %>%
summarise_each(mean)
names(bothset)
summaise <- bothset %>%
group_by(activity, subject) %>%
summarise_all(mean)
summaise <- bothset %>%
group_by(activity, subject) %>%
summarise_all(funs(mean))
bothset %>%
select(-2)
summaise <- bothset %>%
select(-1) %>%
group_by(activity, subject) %>%
summarise_all(mean)
summarise <- bothset %>%
select(-1) %>%
group_by(activity, subject) %>%
summarise_all(mean)
head(summarise)
